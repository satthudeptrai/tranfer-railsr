const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const TransactionsModel = new Schema({
  transaction_id: {
    type: String,
    require: true,
  },
  transaction_status: {
    type: String,
    require: true,
  },
  transaction_info: {
    type: Object,
    require: true,
  },
  transaction_type: {
    type: String,
    enum: [
      "transaction-type-send",
      "transaction-type-card-receive",
      "transaction-type-inter-ledger",
      "transaction-type-card-reserve",
      "transaction-type-manual-credit",
      "transaction-type-outstanding-balance-repayment",
      "transaction-type-manual-debit",
      "transaction-type-inter-ledger-omnibus",
      "transaction-type-debit-payment-send",
      "transaction-type-receive",
      "transaction-type-virtual-debit-card-debit",
      "transaction-type-debit-send",
      "transaction-type-fx"
    ],
    require: true,
  },
  amount: {
    type: Number,
    require: true,
  },
  amount: {
    type: Number,
    require: true,
  },
  asset_class: {
    type: String,
    enum: ["commodity", "currency"],
    require: true,
  },
  asset_type: {
    type: String,
    enum: [
      "pln",
      "aud",
      "chf",
      "cad",
      "sek",
      "goldbloc",
      "usd",
      "nok",
      "whisky",
      "points",
      "virtual-currency",
      "jpy",
      "huf",
      "hkd",
      "nzd",
      "gold",
      "czk",
      "sgd",
      "ron",
      "gbp",
      "hrk",
      "eur"
    ],
    require,
  },
  partner_product: {
    type: String,
    enum: [
      "ExampleBank-SGD-2",
      "PayrNet-SGD-2",
      "Banking-AUD-1",
      "PayrNet-SGD-1",
      "ExampleBank-SG-1",
      "Railsbank-Rewards-1",
      "ExampleBank-SGD-1",
      "Railsbank-Credit-Card-2",
      "PayrNet-GBP-Debit-Send",
      "PayrNet-GBP-2",
      "Railsbank-Direct-Debit-1",
      "ExampleBank-USD-1",
      "Railsbank-KYC-4",
      "ExampleBank-AUD-1",
      "ExampleBank-FX-1",
      "PayrNet-USD-1",
      "ExampleBank-USD-2",
      "ExampleBank-EUR-3",
      "Railsbank-KYC-1",
      "Railsbank-Debit-Card-4",
      "ExampleBank-GBP-2",
      "Railsbank-Credit-Card-1",
      "Goldbloc-Conversion-1",
      "Railsbank-KYC-5",
      "Railsbank-AML-Screening-1",
      "S-Debit-Card-5",
      "PayrNet-EUR-3",
      "S-Debit-Card-3",
      "Railsbank-USD-Credit-1",
      "S-Debit-Card-8",
      "S-Debit-Card-6",
      "Banking-EU-1",
      "Onfido-IDV-1",
      "ExampleBank-EUR-1",
      "S-Debit-Card-1",
      "S-Debit-Card-7",
      "Railsbank-Debit-Card-3",
      "PayrNet-EUR-1",
      "Railsbank-Conversion-1",
      "PayrNet-GBP-1",
      "Railsbank-Debit-Card-1",
      "Railsbank-Virtual-1",
      "Railsbank-KYC-2",
      "ExampleBank-USD-Credit-1",
      "Railsbank-Debit-Card-5",
      "S-Debit-Card-4",
      "ExampleBank-GBP-Debit-Send",
      "ExampleBank-GBP-1",
      "Banking-SG-1",
      "S-Debit-Card-2",
      "Railsbank-Identity-and-Verification-Service-1",
      "ExampleBank-Direct-Debit-1",
      "Railsbank-Debit-Card-2",
      "ExampleBank-EU-1",
    ],
    require: true,
  },
  created_at: {
    type: String,
    require: true
  },
  acquirer_reference_number: {
    type: String,
  },
  additional_info: {
    type: String,
  },
  amount_beneficiary_account: {
    type: Number,
  },
  amount_ledger_from: {
    type: Number,
  },
  amount_local_currency: {
    type: Number,
  },
  beneficiary_account_id: {
    type: String,
  },
  beneficiary_id: {
    type: String,
  },
  card_currency: {
    type: String,
  },
  card_entry_method: {
    type: String,
  },
  card_expiry_date: {
    type: String,
  },
  card_id: {
    type: String,
  },
  card_rules_breached: {
    type: [String],
  },
  card_transaction_type: {
    type: String,
  },
  conversion_date: {
    type: String,
  },
  conversion_rate: {
    type: Number,
  },
  creation_reason: {
    type: String,
  },
  cut_off_time_implementation: {
    type: String,
    enum: ["strict", "loose"]
  },
  daily_unique_refence: {
    type: String,
  },
  debit_payment_id: {
    type: String,
  },
  decline_reason: {
    type: String,
  },
  decline_reason_code: {
    type: Object,
  },
  enduser_verified_transaction: {
    type: String,
    enum: [
      "non-compliant",
      "trusted-beneficiary",
      "recurring-transactions",
      "payment-to-self",
      "low-value-transaction",
      "not-applicable-corporate-user",
      "verified",
    ]
  },
  event_group_created_at: {
    type: String,
  },
  event_group_id: {
    type: String,
  },
  failure_reasons: {
    type: [String],
    enum: [
      "declined-by-compliance-firewall",
      "card-not-active",
      "insufficient-funds",
      "payment-token-not-found",
      "partner-error",
      "payment-token-not-active",
      "card-rules-breached",
      "contact-support",
      "fx-issue",
    ]
  },
  fixed_side: {
    type: String,
    enum: ["beneficiary", "sender"]
  },
  ledger_from_id: {
    type: String,
  },
  ledger_to_id: {
    type: String,
  },
  mcc_description: {
    type: String,
  },
  merchant_category_code: {
    type: String,
  },
  merchant_city: {
    type: String,
  },
  merchant_country: {
    type: String,
  },
  merchant_details: {
    type: String,
  },
  merchant_id: {
    type: String,
  },
  merchant_name: {
    type: String,
  },
  merchant_postcode: {
    type: String,
  },
  merchant_region: {
    type: String,
  },
  merchant_street: {
    type: String,
  },
  merchantbank_id: {
    type: String,
  },
  missing_data: {
    type: [String],
  },
  original_transaction_id: {
    type: String,
  },
  partner_product_fx: {
    type: String,
    enum: ["ExampleBank-FX-1", "PayrNet-FX-1"]
  },
  payment_info: {
    type: Object,
  },
  payment_method: {
    type: String,
    enum: ["swift", "local"]
  },
  payment_token_id: {
    type: String,
  },
  payment_type: {
    type: String,
    enum: [
      "payment-type-AU-NPP",
      "payment-type-EU-Target2",
      "payment-type-Global-SWIFT",
      "payment-type-SG-GIRO",
      "payment-type-AU-DE",
      "payment-type-EU-SEPA-Instant",
      "payment-type-UK-BACS",
      "payment-type-SG-MEPS",
      "payment-type-US-ACH",
      "payment-type-card",
      "payment-type-EU-SEPA-Step2",
      "payment-type-SG-FAST",
      "payment-type-AU-BPAY",
      "payment-type-virtual-debit-card-debit",
      "payment-type-SG-PayNow",
      "payment-type-inter-ledger",
      "payment-type-UK-FasterPayments",
      "payment-type-fx",
      "payment-type-US-Wires",
    ]
  },
  point_of_sale_capability: {
    type: Object,
  },
  point_of_sale_country_code: {
    type: String,
  },
  point_of_sale_data: {
    type: Object,
  },
  point_of_sale_info: {
    type: String,
  },
  point_of_sale_reference: {
    type: String,
  },
  processor_timestamp: {
    type: String,
  },
  reason: {
    type: String,
  },
  receipt_id: {
    type: String,
  },
  reference: {
    type: String,
  },
  rejection_reasons: {
    type: [String],
    enum: [
      "beneficiary-sort-code-or-account-number-unknown",
      "beneficiary-sort-code-or-account-number-unknown",
      "beneficiary-sort-code-or-account-number-unknown",
      "information-missing",
      "information-missing",
      "information-missing",
      "beneficiary-bank-unknown",
      "beneficiary-bank-unknown",
      "beneficiary-bank-unknown",
      "account-transferred",
      "account-transferred",
      "account-transferred",
      "sender-account-closed",
      "sender-account-closed",
      "sender-account-closed",
      "api-subscription-invalid",
      "api-subscription-invalid",
      "api-subscription-invalid",
      "beneficiary-sort-code-not-enabled-for-faster-payments",
      "beneficiary-sort-code-not-enabled-for-faster-payments",
      "beneficiary-sort-code-not-enabled-for-faster-payments",
      "sending-bank-unknown",
      "sending-bank-unknown",
      "sending-bank-unknown",
      "account-stopped",
      "account-stopped",
      "account-stopped",
      "organisation-id-incorrect",
      "organisation-id-incorrect",
      "organisation-id-incorrect",
      "transaction-currency-different-to-receiver-account",
      "transaction-currency-different-to-receiver-account",
      "transaction-currency-different-to-receiver-account",
      "beneficiary-information-missing",
      "beneficiary-information-missing",
      "beneficiary-information-missing",
      "beneficiary-sort-code-and-account-number-unknown",
      "beneficiary-sort-code-and-account-number-unknown",
      "beneficiary-sort-code-and-account-number-unknown",
      "transaction-cancelled",
      "transaction-cancelled",
      "transaction-cancelled",
      "validation-error",
      "validation-error",
      "validation-error",
      "beneficiary-account-number-invalid",
      "beneficiary-account-number-invalid",
      "beneficiary-account-number-invalid",
      "beneficiary-name-does-not-match-beneficiary-account",
      "beneficiary-name-does-not-match-beneficiary-account",
      "beneficiary-name-does-not-match-beneficiary-account",
      "currency-and-amount-invalid",
      "currency-and-amount-invalid",
      "currency-and-amount-invalid",
      "sending-agency-account-stopped",
      "sending-agency-account-stopped",
      "sending-agency-account-stopped",
      "sender-sort-code-or-account-number-unknown",
      "sender-sort-code-or-account-number-unknown",
      "sender-sort-code-or-account-number-unknown",
      "account-number-unknown",
      "account-number-unknown",
      "account-number-unknown",
      "sending-account-transferred",
      "sending-account-transferred",
      "sending-account-transferred",
      "beneficiary-sort-code-invalid",
      "beneficiary-sort-code-invalid",
      "beneficiary-sort-code-invalid",
      "amount-invalid",
      "amount-invalid",
      "amount-invalid",
      "rejected-by-receiving-bank-with-unspecified-reason",
      "rejected-by-receiving-bank-with-unspecified-reason",
      "rejected-by-receiving-bank-with-unspecified-reason",
      "transaction-failed-other-reason",
      "transaction-failed-other-reason",
      "transaction-failed-other-reason",
      "invalid-amount",
      "invalid-amount",
      "invalid-amount",
      "sending-agency-account-closed",
      "sending-agency-account-closed",
      "sending-agency-account-closed",
      "insufficient-funds",
      "insufficient-funds",
      "insufficient-funds",
      "sender-account-transferred",
      "sender-account-transferred",
      "sender-account-transferred",
      "transaction-failed-contact-beneficiary",
      "transaction-failed-contact-beneficiary",
      "transaction-failed-contact-beneficiary",
      "beneficiary-account-closed-or-stopped",
      "beneficiary-account-closed-or-stopped",
      "beneficiary-account-closed-or-stopped",
      "currency-invalid",
      "currency-invalid",
      "currency-invalid",
      "reference-field-needed",
      "reference-field-needed",
      "reference-field-needed",
      "beneficiary-account-stopped",
      "beneficiary-account-stopped",
      "beneficiary-account-stopped",
      "sender-account-stopped",
      "sender-account-stopped",
      "sender-account-stopped",
      "returned-via-recall",
      "returned-via-recall",
      "returned-via-recall",
      "beneficiary-address-missing",
      "beneficiary-address-missing",
      "beneficiary-address-missing",
      "receiving-agency-account-stopped",
      "receiving-agency-account-stopped",
      "receiving-agency-account-stopped",
      "account-overdrawn",
      "account-overdrawn",
      "account-overdrawn",
      "sender-account-closed-or-stopped",
      "sender-account-closed-or-stopped",
      "sender-account-closed-or-stopped",
      "syntax-error",
      "syntax-error",
      "syntax-error",
      "receiving-agency-account-closed",
      "receiving-agency-account-closed",
      "receiving-agency-account-closed",
      "additional-remittance-info-invalid",
      "additional-remittance-info-invalid",
      "additional-remittance-info-invalid",
      "transaction-unauthorised",
      "transaction-unauthorised",
      "transaction-unauthorised",
      "account-closed",
      "account-closed",
      "account-closed",
      "duplicated-payment",
      "duplicated-payment",
      "duplicated-payment",
      "beneficiary-name-missing",
      "beneficiary-name-missing",
      "beneficiary-name-missing",
      "account-number-invalid",
      "account-number-invalid",
      "account-number-invalid",
      "transaction-failed-please-retry-later",
      "transaction-failed-please-retry-later",
      "transaction-failed-please-retry-later",
      "receiving-account-transferred",
      "receiving-account-transferred",
      "receiving-account-transferred",
      "receiving-bank-currently-unavailable",
      "receiving-bank-currently-unavailable",
      "receiving-bank-currently-unavailable",
      "receiving-agency-sort-code-and-account-number-unknown",
      "limits-exceeded",
      "directdebit-no-valid-mandate-supplied",
      "directdebit-missing-mandatory-inform",
      "invalid-bic",
      "reference-invalid",
      "transaction-failed-please-retry",
      "duplicate-fpid2",
      "account-invalid",
      "sender-account-invalid",
      "payment-type-invalid",
      "terms-and-conditions-not-met",
      "terms-and-conditions-limit",
      "sending-agency-sort-code-and-account-number-unknown",
      "transaction-failed",
      "sending-fps-institution-action-required",
      "sort-code-invalid",
      "amount-exceeds-account-limit",
      "receiver-account-transferred",
      "beneficiary-account-closed",
      "system-error",
    ]
  },
  settlement_date: {
    type: String,
  },
  swift_charge_bearer: {
    type: String,
    enum: [
      "charge-bearer-creditor",
      "charge-bearer-shared",
      "charge-bearer-service-level",
      "charge-bearer-debtor",
    ]
  },
  swift_service_level: {
    type: String,
    enum: [
      "service-level-urgent-payment",
      "service-level-urgent-payment-net-settlement",
      "service-level-book-transacion",
      "service-level-eba-priority-service",
      "service-level-sepa",
      "service-level-non-urgent-priority-payment",
      "service-level-same-day-value",
      "service-level-non-urgent-payment",
    ]
  },
  to: {
    type: Object,
  },
  transaction_audit_number: {
    type: String,
  },
  transaction_currency: {
    type: String,
  },
  transaction_direction: {
    type: String,
  },
  transaction_meta: {
    type: Object,
  },
  transaction_printout: {
    type: Object,
  },
  unblocking_reason: {
    type: String,
  },
});
module.exports = mongoose.model("TransactionsModel", TransactionsModel);
